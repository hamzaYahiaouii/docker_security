-name : Docker host configuration
  hosts: docker
  remote_user: ubuntu
  become: yes

  tasks: 
    - name : 1.1.1 Ensure a separate partition for containers has been created (Automated)
    command : if  grep '/var/lib/docker\s' /proc/mounts ; then printf "\033[1;32m [PASS] \033[0m\n" ; else printf "\033[1;33m [WARN] \033[0m\n" ; fi
    - name : 1.1.2 Ensure only trusted users are allowed to control Docker daemon
    command : echo "Users= $(getent group docker)"
    command : printf "\033[1;32m[INFO]:\033[0m You should remove any untrusted users from the docker group using command sudo gpasswd -d <your-user> docker or add trusted users to the docker group using command sudo usermod -aG docker <your-user>. You should not create a mapping of sensitive directories from the host to container volumes."
    -name : 1.1.3 Ensure auditing is configured for the Docker daemon (Automated)
    apt:
      name: git
      state: present
    command: if sudo auditctl -l | grep /usr/bin/dockerd ; then printf "\033[1;32m [PASS] \033[0m\n"; else printf "\033[1;31m [WARN] \033[0m\n"; fi
    - name: 1.1.4 Ensure auditing is configured for Docker files and directories /run/containerd (Automated)
    apt:
      name: git
      state: present
    command: if sudo auditctl -l | grep /run/containerd ; then printf "\033[1;32m [PASS] \033[0m\n"; else printf "\033[1;31m [WARN] \033[0m\n"; fi 
    - name: 1.1.5 Ensure auditing is configured for Docker files and directories /var/lib/docker (Automated)
    apt:
      name: git
      state: present
    command: if sudo auditctl -l | grep /var/lib/docker ; then printf "\033[1;32m [PASS] \033[0m\n"; else printf "\033[1;31m [WARN] \033[0m\n"; fi 
    - name: 1.1.6 Ensure auditing is configured for Docker files and directories /etc/docker (Automated)
    apt:
      name: git
      state: present
    command: if sudo auditctl -l | grep /etc/docker ; then printf "\033[1;32m [PASS] \033[0m\n"; else printf "\033[1;31m [WARN] \033[0m\n"; fi 
    
    - name: 1.1.7 Ensure auditing is configured for Docker files and directories docker.service (Automated)
    apt:
      name: git
      state: present
    command: if sudo auditctl -l | grep docker.service ; then printf "\033[1;32m [PASS] \033[0m\n"; else printf "\033[1;31m [WARN] \033[0m\n"; fi 

    - name: 1.1.8 Ensure auditing is configured for Docker files and directories containerd.sock (Automated)
    apt:
      name: git
      state: present
    command: if sudo auditctl -l | grep containerd.sock ; then printf "\033[1;32m [PASS] \033[0m\n"; else printf "\033[1;31m [WARN] \033[0m\n"; fi

    - name: 1.1.9 Ensure auditing is configured for Docker files and directories docker.socket (Automated)
    command: s=$(systemctl show -p FragmentPath docker.socket | cut -d "=" -f 2); if [ -f $s ] ; then if grep ListenStream $s 1>/dev/null ; then printf "\033[1;32m [FragmentPath exist] \033[0m\n"; else printf "\033[1;31m [WARN] FragmentPath does not exist, you should verify docker.socket FragmentPath\033[0m\n" ; fi ;fi
    command: if sudo auditctl -l | grep docker.socket ; then printf "\033[1;32m [PASS] \033[0m\n"; else printf "\033[1;31m [WARN] no audit rule existed \033[0m\n"; fi

    - name: 1.1.10 Ensure auditing is configured for Docker files and directories /etc/default/docker (Automated)